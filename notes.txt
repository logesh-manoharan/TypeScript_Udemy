TypeScript = Typescript is super set of JavaScript.

Takes JavaScript and add more advantages by creating several new features.

Browser doesn't execute Typescript.

Node JS is also didn't execute.

Seperate Compiler which is very strong will convert the typescript into the JavaScript.

TypeScript is converted into JavaScript and executed in all the environments.

Command to install the TYPESCRIPT 

    $ npm install -g typescript

Main Advantage:

    It allows the developers to write a very clear and error less code.

    We can avoid many unwanted and unnecessary errors.

    Non JavaScript features like Interfaces and Generics

    Meta-Programming Features like Decorators

    Rich Configuration options (We can make our own compiler)


    Course Outline:

        1. TypeScript Basics
        2. Compiler & Configuration Deep Dive
        3. Working  with Next Gen JS Code
        4. Classes & Interfaces
        5. dvanced Types & TypeScript Features
        6. Generics
        7. Decorators
        8. Time to Practice - Full Project
        9. Working with Namespaces & modules
        10. Webpack & Typescript
        11. Rwact + TypeScript & NodeJs + TypeScript


        TypeScript                                  JavaScript

        eg:                                         eg:

        function add (n1: number, n2: number) {     function add (n1, n2) {
            return n1 + n2;                             if (typeof n1 !== 'number' || typeof n2 !== 'number') {
        }                                                   return new Error("Input should be a number !!");
                                                        }
                                                        return n1 + n2;
                                                    }



        Core Types (of TYPES):
                                SPECIALITIES
            number  -               ---
            string  -               ---
            boolean -               ---
            object  -               ---
            Array   - it contains 'any' type i.e. We can store data in array with different data types
            tuples  - JS doesn't contains it. (Fixed length array)
            enum    - JS doesn't contains it. (To define the GLOBAL CONSTANTS)


        

TypeScript COMPILER: (TSC)     [SECTION 3]

    $tsc

    1. Watch on single file:   
        $tsc <FILE NAME> -w / --watch

    2. Watch on all the files in the current folder:
        $tsc -w / --watch

    To customise the 'TypeScript Compiler' more... we can use the 'tsconfig.json' file like package.json file to cinfigure the Node JS Project

    How to create a 'tsconfig.json' File in TypeScript? Ans: Exactly same as NPM.

    3. Creating the .json file for more Configuration:

        $tsc --init

        About tsconfig.json:
            By default, most of the features are commented.
            Apart from the features listed in the tsconfig.json file there are some features also there.


        Few important features in 'tsconfig.json' file:

            'include' -> TSC only converts the files included in this. It will not consider anything other than that.
            'exclude' -> converse to 'include'
                Example: 
                    {
                        "compilerOptions": {
                            ............................
                            ... < DISCUSSED BELOW > ....
                            ............................
                        },
                        "include": ["script.ts", "app.ts", "*.dev.ts"],
                        "exclude": ["node_modules"]
                    }

            Compiler Options: [Important Options]

                target        ->    JS Version.
                lib           ->    Libraries needed for the TypeScript to run.
                sourceMap     ->    When we open the console in BROWSER during the execution of application
                                    in the 'source' tab we can see the 'JS' files but not 'TS' files.

                                    So, to see the TS files too in the browser's console TSC will create
                                    '<FILE NAME>.js.map' file. That will shown in Browser's console.

                outDir        ->    PATH in which JS Files should be generated.
                rootDir       ->    PATH from which TS Files should be taken.


                (This is not created by default. We have to create it if we need it. It will one of the useful options)
                noEmitOnError ->    JS file will not create when TS file contains error. [DEFAULT 'false']



Advanced Types: [SECTION - 6]
    
    1. Intersection Types
    2. Type Guards
    3. Discriminated Unions
    4. Type Casting
    5. Function Overloads



    









